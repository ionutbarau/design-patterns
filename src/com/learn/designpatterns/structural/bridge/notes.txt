Decouple an abstraction from its implementation so that the two can vary independently. It puts the abstraction
and the implementation in separate class hierarchies. There will be one hierarchy for interfaces and one
hierarchy for implementations.
Bridge is also known as Handle/Body

It is composed from an Abstraction with its RefinedAbstraction as a subclass and and Implementor with its ConcreteImplementor
classes in its hierarchy.
The actual bridge is done through composition. The Abstraction has a reference to the Implementor.
The Abstraction (Shape) defines the abstraction interface and maintains a reference to on object of type Implementor.
RefinedAbstraction(Triangle) extends the interface defined by Abstraction.
Implementor (Color) defines the interface for implementation classes. The interface does not have to correspond
exactly to the Abstraction interface, if fact they can be quite different. Typically the Implementor interface provides
only primitive operations, and Abstraction defines higher-level operations based on these primitives.
The ConcreteImplementor (RedColor, GreenCOlor) implements the Implementor interfaces and defines its concrete implementation.
Abstraction forwards Client requests to it implementor object.

When to use
1.You want to avoid a permanent binding between an abstraction and its implementation.
  This might be the case when the implementation must be selected or switched at run-time.
2.Both the abstraction and the implementation should be extensible by subclassing.
3.Changes in the implementation of an abstraction should have no impact on clients.Their code should not have to be recompiled.

Related patterns
AbstractFactory can create and configure a particular Bridge.
Adapter is geared toward making unrelated classes work together. It is ussualy applied to systems after they've been designed.
Bridge on the other hand, is used up-front in a design to let abstractions and implementations vary independently.


Flyweight uses sharing to support large numbers of fine-grained objects efficiently, without having to many objects in memory.
Used to reduce memory footprint.
A Flyweight is a shared object that can be used in multiple context simultaneously. It cannot make assumptions about the
context in which they operate. it stores state that is independent of the context. That's why it can be shared.
The state that the Flyweight stores is called intrinsic state. The context passes extrinsic state to the Flyweight..


The Flyweight (Glyph) declares an interface through which flyweights can receive and act on extrinsic state.
The ConcreteFlyweight(CharacterGlyph) implements Flyweight interface and adds storage for intrinsic state, if any. This object must be shareable
and the state it stores must be intrinsic, independent of the context.
UnsharedConcreteFlyweight (Row, Column) are subclasses of Flyweight that are not shared. Not all subclasses of Flyweight interface need to be shared.
They usually store ConcreteFlyweight objects as children.
The FlyweightFactory (GlyphFactory) creates and manages flyweight objects. It ensure that flyweight objects are shared properly. When
a client requests a flyweight, the factory supplies an existing instance or creates one if none exists.
The Client maintains a references to flyweight(s) and computes and stores extrinsic state of flyweight(s)
Clients pass extrinsic state to the flyweight when they invoke its operations. Also Clients should not instantiate
ConcreteFlyweights directly, they have to use the FlyweightFactory to ensures they are shared properly


When to use it
1. An application uses a large number of objects
2. Storage costs are high because of the sheer quantity of objects
3. Most objects state can be made extrinsic
4. Many groups of objects can be replaced by relatively few shared objects once extrinsic state can be removed
5. The application does not depend on object identity. Since flyweight objects may be shared, identity tests will return true
for conceptually distinct objects

Related patterns
Flyweight patter is often combined with Composite to implement a logically hierarchical structure in terms of a directed-acyclic graph with shared leaf nodes.
It is often best to implement State and Strategy objects as flyweights.
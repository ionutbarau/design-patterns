Singleton ensures a class has only one instance, and provide a global point of access to it.
The class itself is responsible for keeping track of it's single instance. The class ensures that no other instance can be created
and provides a way to access that single instance.

It is implemented as a single class (Singleton) that is responsible for creating it's own unique instance, and provides
and Instance operation that clients use to get the single instance. The constructor is private or protected (if we want to allow subclassing)
so that clients cannot instantiate this class. Instance is usually lazy initialized. Also thread safety needs to be addressed
if the instance is used in multithreaded applications, because more than one instance can be created if not properly designed.


When to use it
1. When there must be only one instance of the class, and it must be accessible to clients from a well-known access point
2. When the sole instance should be extensible by subclassing, and clients should be able to use an extended
instance without modifying their code

Related patterns
Many patterns can be implemented as Singletons - AbstractFactory, Builder, Prototype